#############################################################################################
###   NAME:              RHEL_Patch_reboot                                                   #
###   VERSION:           1.0                                                                 #
###   DESCRIPTION:       Update patches (Kernel and Glib inclued                             #
###   WHY:               Ansible Lab                                                         #
###   CREATED BY:        Felipe Thomaz Giffu                                                 #
###   PLATFORM:          Linux: Red Hat OR Linux with YUM installed                          #
#############################################################################################
---
- name: Playbook responsavel para atualizacao do sistema operacional
  hosts: all
#  remote_user: ansible
#  become: yes
#  become_method: sudo
  any_errors_fatal: false
  vars:
        pre_update_script: /var/log/checklist/RHEL_pre_update.sh
        post_update_script: /var/log/checklist/RHEL_post_update.sh
##########################################################################
## pre_update script
##########################################################################
  pre_tasks:
    - name: Criando o diretorio /var/log/checklist se não existir
      file:
        path: /var/log/checklist
        state: directory
        mode: '0775'
    - name: Instalando o patch unzip e wget para baixar os scripts
      yum:
        name: 
          - unzip
          - wget
        state: latest
    - name: Fazendo o downloaad do script pre-update para o servidor
      shell: "cd /var/log/checklist/ ; wget https://raw.githubusercontent.com/felipetgiffu/ansible_lab/main/1-Update_patches_withreboot/RHEL_pre_update.sh"
    - name: Validando se o script foi baixado corretamente e esta no diretorio correto
      stat:
        path: '{{ pre_update_script }}'
      register: pre_update_file
    - name: Executando o script de pre atualização
      command: sh '{{ pre_update_script }}'
      when: pre_update_file.stat.exists == true
      ignore_errors: no
###########################################################################
## Check if the server has updates available to be installed
###########################################################################
  tasks:
    - name: Validando os patches disponiveis para serem atualizados
      shell: yum list updates 
      register: updates
      when: ansible_distribution == "RedHat"
###########################################################################
## Display the patches available
###########################################################################
    - name: Abaixo será listado os patches disponiveis para serem atualizados
      debug:
        msg: " Found {{ updates.stdout | replace('\n', '   ')  }}"
###########################################################################
## Installing all patches
###########################################################################
    - name: Atualizando todos os patches
      yum:
        name: '*'
        state: latest
      tags:
        - skip_ansible_lint
      when: ansible_distribution == "RedHat"
 ###########################################################################
 ## Check if reboot is required
 ###########################################################################
    - name: Comparando o Kernel antigo com o Kernel Atual
      shell: |
        LAST_KERNEL=$(rpm -q --last kernel | perl -pe 's/^kernel-(\S+).*/$1/' | head -1)
        CURRENT_KERNEL=$(uname -r)
        if [[ $LAST_KERNEL != $CURRENT_KERNEL ]]; then
          # Set reboot flag
          touch /tmp/reboot
        fi
      tags:
        - skip_ansible_lint
###########################################################################
## Reboot the server if required
###########################################################################
    - name: Validando os arquivos pré reboot
      stat:
        path: /tmp/reboot
      register: reboot
    - name: Validando os arquivos pré reboot 2
      file:
        path: /tmp/reboot
        state: absent
      when: reboot.stat.exists == true
    - name: Rebootando Servidor
      shell: sleep 2 && /sbin/shutdown -r now "Reboot é necessario para atualizar o Kernel. Iremos rebootar o sistema." && sleep 2
      async: 20
      poll: 0
      when: reboot.stat.exists == true
###########################################################################
## Waiting the reboot be completed
###########################################################################
    - name: Aguarde em quanto o reboot é finalizado e o servidor volte a ficar acessivel
      wait_for_connection:
        delay: 60
        timeout: 240
      when: reboot.stat.exists == true
###########################################################################
## post_update script
###########################################################################
  post_tasks:
    - name: Baixando o script post-update para o servidor
      shell: "cd /tmp ; wget https://raw.githubusercontent.com/felipetgiffu/ansible_lab/main/1-Update_patches_withreboot/RHEL_post_update.sh"
    - name: Validando se o script post-update foi baixado e esta no local correto
      stat:
        path: '{{ post_update_script }}'
      register: post_update_file
    - name: Executando o script post-update
      command: sh '{{ post_update_script }}'
      when: post_update_file.stat.exists == true
      ignore_errors: no
    - name: Deletando o script pre-update pois o mesmo não sera mais necessário
      file:
        path: /var/log/checklist/RHEL_pre_update.sh
        state: absent
    - name: Deletando o script post-update pois o mesmo não sera mais necessário
      file:
        path: /var/log/checklist/RHEL_post_update.sh
        state: absent
    - debug:
        msg: A ATUALIZACAO DE PATCH FOI CONCLUIDA COM SUCESSO
...
